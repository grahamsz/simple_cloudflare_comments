
import type { PluginArgs } from "..";

import { SimpleCloudflareCommentsUser } from "../index";
import { parse } from 'cookie';
import { redirect } from "worker-auth-providers/src/providers/github";


interface Env {
	COMMENTS: D1Database;
}


type SimpleCloudflareCommentsPlugin<
  Env = unknown,
  Params extends string = any,
  Data extends Record<string, unknown> = Record<string, unknown>
> = PagesPluginFunction<Env, Params, Data, PluginArgs>;


export const onRequest: PagesFunction<Env> = async (context) => {

    // This retrieves the page from the previous handler, usually just the CDN
    const response = await context.next();


    var ct = response.headers.get("content-type");

    response.headers.set("X-Middleware-Status", response.status);

    if ((!ct) || (!ct.startsWith("text/html")) || (response.status != 200)) 
    {

      return response;
    }
    
    var injector = new CommentThreadInjectionHandler(context);
    await injector.loadComments();

    if (response.headers.get("etag"))
    {
      var cookieAddOn = "";
      // add the last three characters of the auth cookie to the etag 
      // so when a user logs in or out, the etag changes
      var cookie = parse(context.request.headers.get('Cookie') || '');
      if (cookie["cloudflare_comments_auth"] != null) {

       cookieAddOn = cookie["cloudflare_comments_auth"].substr(-3);
      }

      const newEtag =  '"' +  response.headers.get('etag').replaceAll('"','') + '-' +injector.context.data.comments.length + '_' +cookieAddOn +'"';


      if (context.request.headers.get('if-none-match') == newEtag)  {
        return new Response("Not Modified", {status:304});  // not modified
      }

      response.headers.set('etag',newEtag);


    }

  

    var updatedResponse =  new HTMLRewriter().on('div.simplecomments', injector).transform(response);


    return updatedResponse;
  };

  class CommentThreadInjectionHandler {

    context: PluginArgs<Env>;
    resultSet: any ;

    constructor(context) 
    {
        this.context=context;
    }

    async loadComments()
    {

        var url =new URL(this.context.request.url).pathname;

        try{


        // join threads, comments and users
        var sql = `SELECT comments.*,users.*, threads.url
                    FROM comments 
                    INNER JOIN users ON comments.user_id = users.user_id
                    INNER JOIN threads ON comments.thread_id = threads.thread_id
         WHERE threads.url = ? ORDER BY comments.timestamp ASC`;
        var results = await this.context.env.COMMENTS.prepare(sql).bind(url).all();
        this.context.data.comments = results.results;

        } catch (e) {
          console.log("error" + e); 
          this.context.data.comments = [];
        }
    }

    async element(element : Element) {
     

       
        try{


        element.setInnerContent(await this.getCommentsElement(this.context.data.comments) , {html:true});
   

        } catch (e)
        {
            console.log(e);
        }
    }

  